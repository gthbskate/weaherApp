{"ast":null,"code":"import { SET_FORECAST_DATA } from '../actions';\n/*<---------------------------------Importamos nuestra constante*/\n\nexport const cities = (state = {}, action) => {\n  /*<--------------------------------Creamos nuestro reducer*/\n  switch (action.type) {\n    case SET_FORECAST_DATA:\n      /*<-----------------------------------------------Indicamos que si es la constante realice lo siguiente*/\n      const {\n        city,\n        forecastData\n      } = action.payload;\n      /*<--------------------Creamos una constante que obtiene los datos que queremos obtener al realizar la acción, en este caso la city y su forecastData*/\n\n      return { ...state,\n        [city]: {\n          forecastData\n        }\n      };\n\n    /*<---------------------En el return estructuramos que si no hay cambio conserva el estado y si lo hay toma cada city y le asigna el forecastData de esa city*/\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["/home/develop/Documents/ReactJS_Redux_ES6/weather-app/src/reducers/cities.js"],"names":["SET_FORECAST_DATA","cities","state","action","type","city","forecastData","payload"],"mappings":"AAAA,SAASA,iBAAT,QAAkC,YAAlC;AAA+C;;AAE9C,OAAO,MAAMC,MAAM,GAAG,CAACC,KAAK,GAAG,EAAT,EAAaC,MAAb,KAAwB;AAAE;AAC5C,UAAQA,MAAM,CAACC,IAAf;AACH,SAAKJ,iBAAL;AAAwB;AACpB,YAAM;AAAEK,QAAAA,IAAF;AAAQC,QAAAA;AAAR,UAAyBH,MAAM,CAACI,OAAtC;AAA+C;;AAC/C,aAAO,EAAE,GAAGL,KAAL;AAAY,SAACG,IAAD,GAAQ;AAAEC,UAAAA;AAAF;AAApB,OAAP;;AAA8C;;AAClD;AACI,aAAOJ,KAAP;AALD;AAOH,CARM","sourcesContent":["import { SET_FORECAST_DATA } from '../actions' /*<---------------------------------Importamos nuestra constante*/\n\n\texport const cities = (state = {}, action) => { /*<--------------------------------Creamos nuestro reducer*/\n\t    switch (action.type) {\n\t\tcase SET_FORECAST_DATA: /*<-----------------------------------------------Indicamos que si es la constante realice lo siguiente*/\n\t\t    const { city, forecastData } = action.payload; /*<--------------------Creamos una constante que obtiene los datos que queremos obtener al realizar la acción, en este caso la city y su forecastData*/\n\t\t    return { ...state, [city]: { forecastData }}; /*<---------------------En el return estructuramos que si no hay cambio conserva el estado y si lo hay toma cada city y le asigna el forecastData de esa city*/\n\t\tdefault:\n\t\t    return state;\n\t    }\n\t}"]},"metadata":{},"sourceType":"module"}