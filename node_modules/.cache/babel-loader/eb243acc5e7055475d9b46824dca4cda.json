{"ast":null,"code":"var _jsxFileName = \"/home/develop/Documents/ReactJS_Redux_ES6/weather-app/src/containers/ForecastExtendedContainer.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport ForecastExtended from '../components/ForecastExtended';\n\nclass ForecastExtendedContainer extends Component {\n  render() {\n    const {\n      city,\n      forecastData\n    } = this.props;\n    /*<-------------------------Simplificamos*/\n\n    return city && React.createElement(ForecastExtended, {\n      city: city,\n      forecastData: forecastData,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 13\n      },\n      __self: this\n    })\n    /*<---Hacemos que forecastData pase por sus props en sus parámetros*/\n    ;\n  }\n\n}\n\nForecastExtendedContainer.propTypes = {\n  city: PropTypes.string.isRequired,\n  forecastData: PropTypes.array.isRequired\n  /*<-----------------------------Pasamos por prop types*/\n\n};\n\nconst mapStateToProps = ({\n  city,\n  cities\n}) => ({\n  city,\n  forecastData: cities[city] && cities[city].forecastData\n});\n/*<-----------------------------------------------------Ahora pasamos por el state para asignar el valor en el cual le indicamos que forecastData viene dentro de cities y que si existe pase los datos*/\n\n\nexport default connect(mapStateToProps, null)(ForecastExtendedContainer);","map":{"version":3,"sources":["/home/develop/Documents/ReactJS_Redux_ES6/weather-app/src/containers/ForecastExtendedContainer.js"],"names":["React","Component","PropTypes","connect","ForecastExtended","ForecastExtendedContainer","render","city","forecastData","props","propTypes","string","isRequired","array","mapStateToProps","cities"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACC,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,OAAT,QAAwB,aAAxB;AAEA,OAAOC,gBAAP,MAA6B,gCAA7B;;AAGA,MAAMC,yBAAN,SAAwCJ,SAAxC,CAAkD;AAC9CK,EAAAA,MAAM,GAAG;AACZ,UAAM;AAAEC,MAAAA,IAAF;AAAQC,MAAAA;AAAR,QAAyB,KAAKC,KAApC;AAA2C;;AAC3C,WACIF,IAAI,IACJ,oBAAC,gBAAD;AAAkB,MAAA,IAAI,EAAEA,IAAxB;AAA8B,MAAA,YAAY,EAAEC,YAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA6D;AAFjE;AAII;;AAP6C;;AAWlDH,yBAAyB,CAACK,SAA1B,GAAsC;AAClCH,EAAAA,IAAI,EAAGL,SAAS,CAACS,MAAV,CAAiBC,UADU;AAElCJ,EAAAA,YAAY,EAAEN,SAAS,CAACW,KAAV,CAAgBD;AAAY;;AAFR,CAAtC;;AAKA,MAAME,eAAe,GAAG,CAAC;AAAEP,EAAAA,IAAF;AAAQQ,EAAAA;AAAR,CAAD,MAAuB;AAAER,EAAAA,IAAF;AAAQC,EAAAA,YAAY,EAAEO,MAAM,CAACR,IAAD,CAAN,IAAgBQ,MAAM,CAACR,IAAD,CAAN,CAAaC;AAAnD,CAAvB,CAAxB;AAAmH;;;AAEnH,eAAeL,OAAO,CAACW,eAAD,EAAiB,IAAjB,CAAP,CAA8BT,yBAA9B,CAAf","sourcesContent":["import React, { Component } from 'react';\n\timport PropTypes from 'prop-types';\n\timport { connect } from 'react-redux';\n\n\timport ForecastExtended from '../components/ForecastExtended'\n\n\n\tclass ForecastExtendedContainer extends Component {\n\t    render() {\n\t\tconst { city, forecastData } = this.props; /*<-------------------------Simplificamos*/\n\t\treturn (\n\t\t    city &&\n\t\t    <ForecastExtended city={city} forecastData={forecastData} /> /*<---Hacemos que forecastData pase por sus props en sus parámetros*/\n\t\t);\n\t    }\n\t}\n\n\n\tForecastExtendedContainer.propTypes = {\n\t    city : PropTypes.string.isRequired,\n\t    forecastData: PropTypes.array.isRequired, /*<-----------------------------Pasamos por prop types*/\n\t};\n\n\tconst mapStateToProps = ({ city, cities }) => ({ city, forecastData: cities[city] && cities[city].forecastData }); /*<-----------------------------------------------------Ahora pasamos por el state para asignar el valor en el cual le indicamos que forecastData viene dentro de cities y que si existe pase los datos*/\n\n\texport default connect(mapStateToProps,null)(ForecastExtendedContainer);"]},"metadata":{},"sourceType":"module"}